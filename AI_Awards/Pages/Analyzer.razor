@page "/analyzer";

@using AI_Awards.Models
@using AI_Awards.Services

@inject IJSRuntime JS
@inject IFileService FileService
@inject ITextService TextService

<PageTitle>Анализатор</PageTitle>

<h1>Анализатор</h1>

<EditForm Model="@_form" OnValidSubmit="Analyse" class="form-container">
    <div class="form-group">
        <label for="text" class="form-label">Введите текст:</label>
        <InputTextArea id="text" @bind-Value="_form.Text" class="form-control"  />
    </div>

    <div class="form-group">
        <label for="file" class="form-label">Загрузите файл (не более @(MAX_FILE_SIZE_MB) МБ):</label>
        <InputFile id="file" OnChange="GetFile" accept=".txt,.mp3" class="form-control" />
    </div>

    <div class="button-group">
        <button type="submit" class="btn btn-primary">Отправить</button>
        <button type="button" @onclick="ResetForm" class="btn btn-secondary">Сбросить</button>
    </div>
</EditForm>

@if (_result.WaitingAnswer)
{
    <p class="result-waiting">Получение ответа...</p>
}
else if (!string.IsNullOrEmpty(_result.Text))
{
    <div class="result-container">
        <p style="text-align: center;"><b>Результат</b></p>
        <p class="result-text">@_result.Text</p>
    </div>
}

@code
{
    private long MAX_FILE_SIZE_MB;

    private AnalyzerFormModel _form;
    private AnalyzerResultModel _result;

    protected override void OnInitialized()
    {
        _form = new AnalyzerFormModel();
        _result = new AnalyzerResultModel();
        MAX_FILE_SIZE_MB = AnalyzerFormModel.MAX_FILE_SIZE_BYTES / (1024 * 1024);
    }

    private async void Analyse(EditContext context)
    {
        _result.WaitingAnswer = true;
        StateHasChanged();

        try
        {
            if (!string.IsNullOrEmpty(_form.Text))
            {
                _result.Text = await TextService.TextAnalyze(_form.Text);
            }
            else if (_form.File != null)
            {
                _result.Text = await FileService.FileAnalyze(_form.File);
            }
        }
        catch (Exception ex)
        {
            _result.Text = $"Произошла ошибка: {ex.Message}";
        }

        _result.WaitingAnswer = false;
        StateHasChanged();
    }

    private async Task GetFile(InputFileChangeEventArgs e)
    {
        if (e.File.Size > AnalyzerFormModel.MAX_FILE_SIZE_BYTES)
            await JS.InvokeVoidAsync("alert", $"Файл слишком большой. Максимальный размер - {MAX_FILE_SIZE_MB} МБ.");

        _form.File = e.File;
    }

    private async Task ResetForm(MouseEventArgs e)
    {
        _form.Text = null;
        _form.File = null;
        await JS.InvokeVoidAsync("ResetForm", "file");
    }
}
